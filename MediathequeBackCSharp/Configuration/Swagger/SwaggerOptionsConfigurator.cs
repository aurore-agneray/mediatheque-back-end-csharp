using MediathequeBackCSharp.Classes;
using MediathequeBackCSharp.Texts;
using Microsoft.Extensions.Options;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.Reflection;

namespace MediathequeBackCSharp.Configuration.Swagger;

/// <summary>
/// Defines the options for using Swagger UI with Swashbuckle
/// </summary>
public class SwaggerOptionsConfigurator : IConfigureNamedOptions<SwaggerGenOptions>
{
    /// <summary>
    /// Partial configuration of the Swagger
    /// </summary>
    /// <param name="options">Swagger options (object type from Swashbuckle package)</param>
    public void Configure(SwaggerGenOptions options)
    {
        Configure(null, options, null);
    }

    /// <summary>
    /// Partial configuration of the Swagger
    /// </summary>
    /// <param name="name">Version name of the API that will be placed into the swagger's url</param>
    /// <param name="options">Swagger options</param>
    public void Configure(string? name, SwaggerGenOptions options)
    {
        Configure(name, options, null);
    }

    /// <summary>
    /// Complete configuration of the Swagger
    /// </summary>
    /// <param name="assemblyVersion">Version of the assembly that will be placed into the swagger's url</param>
    /// <param name="options">Swagger options</param>
    /// <param name="routePrefix">API's route prefix</param>
    public void Configure(string? assemblyVersion, SwaggerGenOptions options, string? routePrefix)
    {
        if (options is null)
        {
            options = new SwaggerGenOptions();
        }

        assemblyVersion = !string.IsNullOrEmpty(assemblyVersion) 
                            ? assemblyVersion 
                            : AssemblyInfo.UNKNOWN_VERSION;

        // Configures the Swagger page
        options.SwaggerDoc(
            assemblyVersion, 
            new OpenApiInfo { Title = SwaggerOptionsTexts.TITLE, Version = assemblyVersion }
        );

        // Prevent some routes to be displayed into the Swagger page
        options.DocumentFilter<SwaggerFilter>();

        options.AddServer(new OpenApiServer
        {
            Url = routePrefix ?? string.Empty,
            Description = SwaggerOptionsTexts.ROUTE_PREFIX_DESCRIPTION
        });

        /* Using System.Reflection for injecting XML's documentation of the project.
         * The XML file is generated by adding 
         * <GenerateDocumentationFile>true</GenerateDocumentationFile> into the .csproj file */
        var xmlFilename = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
        options.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));
    }
}